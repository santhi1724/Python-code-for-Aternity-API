import os
import InternalCommon
import requests
from requests.auth import HTTPBasicAuth
import json
import socket
import sys
import pyodbc
import configparser
import sysconfig
import datetime
import time

def getSetting(key):
        config = configparser.RawConfigParser()        
        #Ensures config file is executed relative to python script    
        config.read(os.path.abspath(os.path.dirname(__file__)) + '\Aternityconfig.cfg')
        connection = pyodbc.connect(config.get('ConnectionStrings','databasexx'))     
        sqlCommand = "SELECT ST_VALUE FROM WD_ST_Settings where ST_Key = '" + key + "';"      
        csr = connection.cursor()
        csr.execute(sqlCommand)
        returnValue = csr.fetchone()
        authdata = returnValue.ST_VALUE
        connection.close()
        return authdata

def aternityData():
    
    try:
        config = configparser.RawConfigParser()
        config.read(os.path.abspath(os.path.dirname(__file__)) + '\Aternityconfig.cfg')       
        connection = pyodbc.connect(config.get('ConnectionStrings','databasexx')) 
        
        if (len(sys.argv) == 3):
            fromdate = sys.argv[1]
            todate = sys.argv[2]
            fromdate = fromdate + "T00:00:00-00:00"
            todate = todate + "T00:00:00-00:00"
            urlNext = 'https://my-odata.aternity.com/aternity.odata/APPLICATIONS_DAILY?$filter=(TIMEFRAME%20ge%20'+fromdate+'%20and%20TIMEFRAME%20lt%20'+todate+')'
            
        else:
            urlNext = 'https://my-odata.aternity.com/aternity.odata/APPLICATIONS_DAILY?$filter=relative_time(yesterday)'
        totalRows = 0
       
        while(urlNext != ''):
            page = requests.get(urlNext, auth=(str(getSetting("AternityAuthusername")),str(getSetting("AternityAuthpassword"))))               
            r = json.loads(page.text)  
            rowCount = 0
            for data in r['value']:
                timeFrame = data['TIMEFRAME']
                timeFrame = datetime.datetime.strptime(timeFrame, "%Y-%m-%dT%H:%M:%S-%U:%W")
                sqlCommand = "exec stp_AM_INS_ApplicationMonitoring @UserId= '%s" % str(data['USERNAME']) + "', @UsedDate= '%s" % timeFrame + "', @UsageTime= %s" % float((data['USAGE_TIME'])*0.001) +", @Application= '%s" % str(data['APPLICATION']) +"'"
                cursor = connection.cursor()
                cursor.execute(sqlCommand)
                cursor.commit()
                rowCount = rowCount + 1
                cursor.close()
            print ('Retrieved '+ str(rowCount) + 'records for timeframe'+ str(timeFrame) )    
            if '@odata.nextLink' in r:
                urlNext = r['@odata.nextLink']
                totalRows = totalRows + rowCount
            else:
                urlNext = ''
                print('Completed retrieving '+ str(totalRows) +' records for timeframe'+ str(timeFrame))
                time.sleep(5)        
    except Exception as e:
        InternalCommon.sendEmail("Encountered error <b>" + str(e) + "</b> when running AternityToWatchdog on server " + socket.gethostname() + " in path " + os.getcwd() + ".","Error in AternityToWatchdog","donotreply@xxxx.com",config.get('AppSettings','ErrorEmailDistribution'))
        raise e   

if __name__ == "__main__":
    aternityData()
